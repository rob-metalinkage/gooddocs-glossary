transform:
  # Keep data only
  - '.data'
  # Set fields with empty or '-' value to null
  - 'walk(if type == "object" then with_entries(if (.value | test("^\\s*-?\\s*$")) then .value = null else . end) else . end)'
  # Remove colons in field names with spaces
  - 'walk(if type == "object" then with_entries(.key |= gsub(" ?: ?"; " ")) else . end)'
  # Remove trailing field names spaces
  - 'walk(if type == "object" then with_entries(.key |= sub(" *$"; "")) else . end)'
  # Generate slug as ID from term
  # (.Term |= sub("[ ]*","_"))
  - 'walk(if ( type == "object") then ( if .Term then .ID = (.Term | gsub("[ ]+";"_") ) else . end ) else . end )'
  # Add ConceptScheme
  - |
    {
      "@id": "https://example.org/glossarydemo",
      "@type": "skos:ConceptScheme",
      "skos:prefLabel": "GoodDocs glossary",
      "concepts": .
    }

types:
  '$.concepts[*]': skos:Concept

# Term,Definition ,Alternative term,Rejected terms,Related terms,Part of speech,Provenance,Notes for translation and localization,
# .. Context Sentence for translation and localization,Modified on,Description of modification

context:
  $:
    skos: http://www.w3.org/2004/02/skos/core#
    dct: http://purl.org/dc/terms/
    ID: '@id'
    Term: skos:prefLabel
    Alternative term: skos:altLabel
    Definition: skos:definition
    Rejected terms:
    Related terms:
      '@id': skos:related
      '@type': '@id'
    Text description: dct:description
    Notes for translation and localization: skos:scopeNote
    Context Sentence for translation and localization: skos:note
    Description of modification: skos:changeNote
    Modified on: dct:modified
    # not used - left as suggestion..
    Status:
      '@id': policy:status
      '@type': '@id'
      '@context':
        '@base': http://www.opengis.net/def/status/
    concepts:
      '@reverse': skos:inScheme
